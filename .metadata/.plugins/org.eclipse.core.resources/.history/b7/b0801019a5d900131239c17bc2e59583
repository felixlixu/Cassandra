package org.apache.cassandra.cache;

import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.util.Set;
import java.util.TreeSet;

import org.apache.cassandra.config.DatabaseDescriptor;
import org.apache.cassandra.db.DecoratedKey;
import org.apache.cassandra.db.compaction.CompactionInfo;
import org.apache.cassandra.service.CacheService;
import org.apache.cassandra.service.StorageService;
import org.apache.cassandra.utils.FileUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AutoSavingCache<K extends CacheKey, V> extends
		InstrumentingCache<K, V> {

	private static final Logger logger = LoggerFactory
			.getLogger(AutoSavingCache.class);

	protected final CacheService.CacheType cacheType;

	//read cache key from file.
	public Set<DecoratedKey> readSaved(String ksName, String cfName) {
		File path = getCachePath(ksName, cfName);
		Set<DecoratedKey> keys = new TreeSet<DecoratedKey>();
		if (path.exists()) {
			DataInputStream in = null;
			try {
				long start = System.currentTimeMillis();

				logger.info(String.format("reading saved cache %s", path));
				in = new DataInputStream(new BufferedInputStream(
						new FileInputStream(path)));
				while (in.available() > 0) {
					int size = in.readInt();
					byte[] bytes = new byte[size];
					in.readFully(bytes);
					ByteBuffer buffer = ByteBuffer.wrap(bytes);
					DecoratedKey key;
					try {
						key = StorageService.getPartitioner().decorateKey(
								buffer);
					} catch (Exception e) {
						logger.info(
								String.format(
										"unable to read entry #%s from saved cache %s; skipping remaining entries",
										keys.size(), path.getAbsolutePath()), e);
						break;
					}
					keys.add(key);
				}
				if (logger.isDebugEnabled())
					logger.debug(String
							.format("completed reading (%d ms; %d keys) saved cache %s",
									System.currentTimeMillis() - start,
									keys.size(), path));
			} catch (Exception e) {
				logger.warn(
						String.format("error reading saved cache %s",
								path.getAbsolutePath()), e);
			} finally {
				FileUtils.closeQuietly(in);
			}
		}
		return keys;
	}

	public AutoSavingCache(ICache<K, V> cache, CacheService.CacheType cacheType) {
		super(cache);
		this.cacheType = cacheType;
	}

	public File getCachePath(String ksName, String cfName) {
		return DatabaseDescriptor.getSerializedCachePath(ksName, cfName,
				cacheType);
	}
	
	public Writer getWriter(int keysToSave){
		return new Writer(keysToSave);
	}

	public class Writer extends CompactionInfo.Holder{

		private final Set<K> keys;

		
	}
	
}
