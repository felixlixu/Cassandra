package org.apache.cassandra.io.sstable;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

import org.apache.cassandra.config.CFMetaData;
import org.apache.cassandra.db.DecoratedKey;
import org.apache.cassandra.db.RowPosition;
import org.apache.cassandra.dht.IPartitioner;
import org.apache.cassandra.io.utils.RandomAccessReader;
import org.apache.cassandra.utils.ByteBufferUtil;
import org.apache.cassandra.utils.FileUtils;
import org.apache.cassandra.utils.HeapAllocator;
import org.apache.cassandra.utils.Pair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is built on top of the SequenceFile.It stores data on disk in sorted fashion. 
 **/
public abstract class SSTable {

	public static final Logger logger=LoggerFactory.getLogger(SSTable.class);
	public static final String TEMPFILE_MARKER="tmp";
	public static final String COMPONENT_DATA=Component.Type.DATA.repr;
	public static final String COMPONENT_STATS=Component.Type.STATS.repr;
	public final Descriptor descriptor;
	protected final boolean compression;
	private final CFMetaData metadata;
	protected final IPartitioner partitioner;
	public Set<Component> components;
	

	public SSTable(Descriptor descriptor, Set<Component> components,
			CFMetaData metadata, IPartitioner partitioner) {
		assert descriptor!=null;
		assert components!=null;
		assert partitioner !=null;
		
		this.descriptor=descriptor;
		Set<Component> dataComponents=new HashSet<Component>(components);
		for(Component component:components){
			assert component.type!=Component.Type.COMPACTED_MARKER;
		}
		this.compression=dataComponents.contains(Component.COMPRESSION_INFO);
		this.components=Collections.unmodifiableSet(dataComponents);
		this.metadata=metadata;
		this.partitioner=partitioner;
	}


	public static Pair<Descriptor, Component> tryComponentFromFilename(
			File dir, String name) {
		try{
			return Component.fromFilename(dir,name);
		}catch(Exception e){
            if (!"snapshots".equals(name) && !"backups".equals(name)
                    && !name.contains(".json"))
                logger.warn("Invalid file '{}' in data directory {}.", name, dir);
            return null;			
		}
	}


	public static long estimateRowFromIndex(RandomAccessReader input) throws IOException {
		final int SAMPLES_CAP=1000,BYTES_CAP=(int)Math.min(10000000, input.length());
		int keys=0;
		while(input.getFilePointer()<BYTES_CAP&&keys<SAMPLES_CAP){
			ByteBufferUtil.skipShortLength(input);
			FileUtils.skipBytesFully(input, 8);
			keys++;
		}
        assert keys > 0 && input.getFilePointer() > 0 && input.length() > 0 : "Unexpected empty index file: " + input;
        long estimatedRows = input.length() / (input.getFilePointer() / keys);
        input.seek(0);
		return estimatedRows;
	}


	public static DecoratedKey<?> getMinimalKey(DecoratedKey<?> key) {
		return key.key.position()>0||key.key.hasRemaining()
				? new DecoratedKey(key.token,HeapAllocator.instance.clone(key.key))
				:key;
	}
}
