package org.apache.cassandra.net;

import java.io.IOError;
import java.io.IOException;
import java.net.InetAddress;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.atomic.AtomicInteger;

import org.apache.cassandra.concurrent.StageManager;
import org.apache.cassandra.config.DatabaseDescriptor;
import org.apache.cassandra.db.ReadVerbHandler;
import org.apache.cassandra.gms.Gossiper;
import org.apache.cassandra.net.sink.SinkManager;
import org.apache.cassandra.service.StorageService;
import org.apache.cassandra.service.StorageService.Verb;
import org.apache.cassandra.utils.ExpiringMap;
import org.apache.cassandra.utils.FBUtilities;
import org.apache.cassandra.utils.Pair;
import org.cliffc.high_scale_lib.NonBlockingHashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Function;

public class MessagingService implements MessagingServiceMBean {

	public static final int VERSION_11=4;
	public static final int version_=VERSION_11;
	private Logger logger=LoggerFactory.getLogger(MessagingService.class);
	private static final long DEFAULT_CALLBACK_TIMEOUT = DatabaseDescriptor.getRpcTimeout();
	
	public static final EnumSet<StorageService.Verb> DROPPABLE_VERBS = EnumSet.of(StorageService.Verb.REQUEST_RESPONSE,
																		StorageService.Verb.COUNTER_MUTATION,
																		StorageService.Verb.READ,
																		StorageService.Verb.MUTATION);
	
	private final Map<StorageService.Verb, AtomicInteger> droppedMessages = new EnumMap<StorageService.Verb, AtomicInteger>(StorageService.Verb.class);
	private final ExpiringMap<String,CallbackInfo> callbacks;
	
	private final Map<StorageService.Verb,IVerbHandler> verbHandlers_;
	private final NonBlockingHashMap<InetAddress,OutboundTcpConnectionPool> connectionManagers_=new NonBlockingHashMap<InetAddress,OutboundTcpConnectionPool>();
	
    private static class MSHandle
    {
        public static final MessagingService instance = new MessagingService();
    }
	
	public static MessagingService instance() {
		return MSHandle.instance;
	}
	
	Function<Pair<String,CallbackInfo>,?> timeoutReporter=new Function<Pair<String,CallbackInfo>,Object>(){
		public Object apply(Pair<String,CallbackInfo> pair){
			return null;
		}
	};
	
	public MessagingService(){
		for(StorageService.Verb verb:DROPPABLE_VERBS){
			droppedMessages.put(verb, new AtomicInteger());
			//lastDroppedInternal
		}
		callbacks=new ExpiringMap<String,CallbackInfo>(DEFAULT_CALLBACK_TIMEOUT,timeoutReporter);
		verbHandlers_=new EnumMap<StorageService.Verb,IVerbHandler>(StorageService.Verb.class);
		
		Runnable logDropped=new Runnable(){
			public void run(){
				logDroppedMessages();
			}
		};
		
	}

	protected void logDroppedMessages() {
		boolean logTpstats=false;
		
		
	}

	public void registerVerbHandlers(Verb read, ReadVerbHandler readVerbHandler) {
		// TODO Auto-generated method stub
		
	}

	/**
	 * Send a message to a given endpoint.similar to sendRR
	 * */
	public String sendRR(MessageProducer producer, InetAddress to,
			IAsyncCallback cb) {
		try{
			return sendRR(producer.getMessage(Gossiper.instance.getVersion(to)),to,cb);
		}catch(IOException ex){
			throw new IOError(ex);
		}
	}

	public String sendRR(Message message, InetAddress to, IMessageCallback cb) {
		return sendRR(message, to, cb, DEFAULT_CALLBACK_TIMEOUT);
	}

	/**
	 * Send a message to a given endpoint. This method specifies a callback
	 * which is invoked with actual response.
	 * Also holds the message (only mutation messages) to determine if it needs
	 * to trigger a hint. 
	 **/
	public String sendRR(Message message, InetAddress to, IMessageCallback cb,
			long timeout) {
		String id=addCallbck(cb,message,to,timeout);
		sendOneWay(message,id,to);
		return id;
	}

	/**
	 * Send a message to a given endpoint. This method adheres to the fire 
	 * and forget style messaging.
	 * */
	public void sendOneWay(Message message, String id, InetAddress to) {
		if(logger.isTraceEnabled())
			logger.trace(FBUtilities.getBroadcastAddress()+"sending"+message.getVersion());
		
		if(message.getFrom().equals(to)){
			receive(message,id);
			return;
		}
		
		Message processedMessage=SinkManager.processClientMessagE(message,id,to);
		if(processedMessage==null){
			return;
		}
		OutboundTcpConnection connection=getConnection(to,processedMessage);
		connection.enqueue(processedMessage,id);
	}

	private OutboundTcpConnection getConnection(InetAddress to,
			Message message) {
		return getConnectionPool(to).getConnection(message);
	}

	private OutboundTcpConnectionPool getConnectionPool(InetAddress to) {
		OutboundTcpConnectionPool cp=connectionManagers_.get(to);
		if(cp==null){
			connectionManagers_.putIfAbsent(to,new OutboundTcpConnectionPool(to));
			cp=connectionManagers_.get(to);
		}
		return cp;
	}

	private void receive(Message message, String id) {
        if (logger.isTraceEnabled())
            logger.trace(FBUtilities.getBroadcastAddress() + " received " + message.getVerb()
                          + " from " + id + "@" + message.getFrom());
        message=SinkManager.processServerMessage(message,id);
        Runnable runnable=new MessageDeliveryTask(message,id);
        ExecutorService stage=StageManager.getStage(message.getMessageType());
        assert stage!=null:"No stage for message type"+message.getMessageType();
        stage.execute(runnable);
	}

	public String addCallbck(IMessageCallback cb, Message message,
			InetAddress to, long timeout) {
		String messageId=nextId();
		CallbackInfo previous;
		if(DatabaseDescriptor.hintedHandoffEnabled()&&message.getVerb()==StorageService.Verb.MUTATION){
			previous=callbacks.put(messageId,new CallbackInfo(to,cb,message),timeout);
		}else{
			previous=callbacks.put(messageId,new CallbackInfo(to,cb),timeout);
		}
		assert previous==null;
		
		return messageId;
	}
	
	private static AtomicInteger idGen=new AtomicInteger();
	
	private IMessageCallback cb;
	private static String nextId(){
		return Integer.toString(idGen.incrementAndGet());
	}

	public void incrementDroppedMessage(Verb verb) {
		droppedMessages.get(verb).incrementAndGet();
	}

	public IVerbHandler getVerbHandler(Verb verb) {
		return verbHandlers_.get(verb);
	}

}
