package org.apache.cassandra.io.utils;

import java.io.File;
import java.io.IOError;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;

import org.apache.cassandra.io.util.FileUtils;
import org.apache.cassandra.io.util.SegmentedFile.Segment;

public class MmappedSegmentedFile extends SegmentedFile {

	public MmappedSegmentedFile(String path, long length,
			Segment[] createSegments) {
		// TODO Auto-generated constructor stub
	}

	public static long MAX_SEGMENT_SIZE=Integer.MAX_VALUE;
	
	static class Builder extends SegmentedFile.Builder{

		private final List<Long> boundaries;
		private long currentSize=0;
		private long currentStart=0;
		
		public Builder(){
			super();
			boundaries=new ArrayList<Long>();
			boundaries.add(0L);
		}
		
		@Override
		public void addPotentialBoundary(long boundary) {
			if(boundary-currentStart<=MAX_SEGMENT_SIZE){
				currentSize=boundary-currentStart;
				return;
			}
			if(currentSize>0){
				currentStart+=currentSize;
				boundaries.add(currentStart);
			}
			currentSize=boundary-currentStart;
			if(currentSize>MAX_SEGMENT_SIZE){
				currentStart=boundary;
				boundaries.add(currentStart);
				currentSize=0;
			}
		}

		@Override
		public SegmentedFile complete(String path) {
			long length=new File(path).length();
			boundaries.add(Long.valueOf(length));
			return new MmappedSegmentedFile(path,length,createSegments(path));
		}
		
        private Segment[] createSegments(String path)
        {
            int segcount = boundaries.size() - 1;
            Segment[] segments = new Segment[segcount];
            RandomAccessFile raf = null;
            try
            {
                raf = new RandomAccessFile(path, "r");
                for (int i = 0; i < segcount; i++)
                {
                    long start = boundaries.get(i);
                    long size = boundaries.get(i + 1) - start;
                    MappedByteBuffer segment = size <= MAX_SEGMENT_SIZE
                                               ? raf.getChannel().map(FileChannel.MapMode.READ_ONLY, start, size)
                                               : null;
                    segments[i] = new Segment(start, segment);
                }
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
            finally
            {
                FileUtils.closeQuietly(raf);
            }
            return segments;
        }
		
	}
}
