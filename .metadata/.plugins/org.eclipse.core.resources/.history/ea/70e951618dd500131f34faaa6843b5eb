package org.apache.cassandra.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.apache.cassandra.db.ReadCommand;
import org.apache.cassandra.db.Row;
import org.apache.cassandra.thrift.ConsistencyLevel;
import org.apache.cassandra.thrift.UnavailableException;
import org.apache.cassandra.utils.LatencyTracker;

public class StorageProxy implements StorageProxyMBean {

	
	
	private static final LatencyTracker readStats=new LatencyTracker();

	public static List<Row> read(List<ReadCommand> commands,
			ConsistencyLevel consistency_level) throws UnavailableException {
		if(StorageService.instance.isBootstrapMode())
			throw new UnavailableException();
		long startTime=System.nanoTime();
		List<Row> rows;
		try{
			rows=fetchRows(commands,consistency_level);
		}finally{
			readStats.addNano(System.nanoTime()-startTime);
		}
		return rows;
	}

	private static List<Row> fetchRows(List<ReadCommand> initialCommands,
			ConsistencyLevel consistency_level) {
		List<Row> rows=new ArrayList<Row>(initialCommands.size());
		List<ReadCommand> commandsToRetry=Collections.emptyList();
		do{
			
		}while(!commandsToRetry.isEmpty());
		return rows;
	}

}
