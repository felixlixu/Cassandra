package org.apache.cassandra.db;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;

import org.apache.cassandra.io.sstable.SSTableReader;
import org.apache.cassandra.utils.IntervalTree.IntervalTree;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataTracker {

	 private static final Logger logger = LoggerFactory.getLogger(DataTracker.class);
	private ColumnFamilyStore cfStore;
	private AtomicReference<View> view;

	public DataTracker(ColumnFamilyStore cfstore) {
		this.cfStore=cfstore;
		this.view=new AtomicReference<View>();
		this.init();
	}
	
	void init() {
		view.set(new View(new Memtable(cfStore),
				Collections.<Memtable>emptySet(),
				Collections.<SSTableReader>emptyList(),
				Collections.<SSTableReader>emptySet(),
				new IntervalTree()));
	}

	static class View{

		private final Memtable memtable;
		private final Set<Memtable> memtablePendingFlush;
		private final List<SSTableReader> sstables;
		private final Set<SSTableReader> compacting;
		private final IntervalTree intervalTree;

		public View(Memtable memtable, Set<Memtable> pendingFlush,
				List<SSTableReader> sstables, Set<SSTableReader> compacting,
				IntervalTree intervalTree) {
			this.memtable=memtable;
			this.memtablePendingFlush=pendingFlush;
			this.sstables=sstables;
			this.compacting=compacting;
			this.intervalTree=intervalTree;
		}

		public View replace(List<SSTableReader> oldSSTables,
				Iterable<SSTableReader> replacements) {
			// TODO Auto-generated method stub
			return null;
		}
		
	}

	public void addInitialSSTables(Collection<SSTableReader> sstables) {
		replace(Collections.<SSTableReader>emptyList(),sstables);
	}

	private void replace(List<SSTableReader> oldSSTables,
			Iterable<SSTableReader> replacements) {
		if(!cfStore.isValid()){
			removeOldSSTablesSize(replacements);
			replacements=Collections.emptyList();
		}
		View currentView,newView;
		do{
			currentView=view.get();
			newView=currentView.replace(oldSSTables,replacements);
		}while(!view.weakCompareAndSet(currentView, newView));
		postReplace(oldSSTables,replacements);
	}

	private void postReplace(List<SSTableReader> oldSSTables,
			Iterable<SSTableReader> replacements) {
		// TODO Auto-generated method stub
		
	}

	private void removeOldSSTablesSize(Iterable<SSTableReader> oldSSTables) {
		for(SSTableReader sstable:oldSSTables){
            if (logger.isDebugEnabled())
                logger.debug(String.format("removing %s from list of files tracked for %s.%s",
                            sstable.descriptor, cfStore.table.name, cfStore.getColumnFamilyName()));
		}
	}

}
