package org.apache.cassandra.db;

import java.util.concurrent.TimeUnit;

import org.apache.cassandra.cache.AutoSavingCache;
import org.apache.cassandra.cache.RowCacheKey;
import org.apache.cassandra.config.CFMetaData;
import org.apache.cassandra.dht.IPartitioner;
import org.apache.cassandra.service.CacheService;
import org.apache.cassandra.service.StorageService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ColumnFamilyStore implements ColumnFamilyStoreMBean {

	private static Logger logger=LoggerFactory.getLogger(ColumnFamilyStore.class);
	
	static{
		StorageService.optionalTasks.scheduleWithFixedDelay(new MeteredFlusher(), 1000, 1000, TimeUnit.MILLISECONDS);
	}

	private Table table;
	private String columnFamily;
	private CFMetaData metadata;
	
	public void initRowCache() {
		long start=System.currentTimeMillis();
		AutoSavingCache<RowCacheKey,ColumnFamily> rowCache=CacheService.instance.rowCache;
		
		int cacheRowRead=0;
		for(DecoratedKey key:rowCache.readSaved(table.name,columnFamily)){
			cacheRow(metadata.cfId,key);
		}
	
	}
	
	private ColumnFamilyStore(Table table,String columnFamilyName,IPartitioner partitioner,int generation,CFMetaData metadata){
		assert metadata!=null: "null metadata for " + table + ":" + columnFamilyName;
		this.table=table;
		columnFamily=columnFamilyName;
		this.metadata=metadata;
		//this.minCompactionThreshold=new DefaultInteger(metadata.getMinCompactionThreshold());
	}

}
