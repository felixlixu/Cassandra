package org.apache.cassandra.io.sstable;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;
import org.apache.cassandra.config.CFMetaData;
import org.apache.cassandra.db.DataTracker;
import org.apache.cassandra.db.DecoratedKey;
import org.apache.cassandra.dht.IPartitioner;
import org.apache.cassandra.utils.SegmentedFile;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * SSTableReaders are open()ed by Table.onStart; after that they are created by SSTableWriter.renameAndOpen
 *  Do not re-call open() on existing SSTable files; use the references kept by ColumnFamilyStore post-start instead.
 **/
public class SSTableReader extends SSTable {
	 private static final Logger logger = LoggerFactory.getLogger(SSTableReader.class);

	public SSTableReader(Descriptor descriptor, Set<Component> components,
			CFMetaData metadata, IPartitioner partitioner, SegmentedFile ifile,
			SegmentedFile dfile, IndexSummary indexSummary, long currentTimeMillis,
			SSTableMetadata sstableMetadata) {
		// TODO Auto-generated constructor stub
	}

	public static Collection<SSTableReader> batchOpen(
			Set<Entry<Descriptor, Set<Component>>> entries,
			final Set<DecoratedKey> savedKeys, final DataTracker tracker, final CFMetaData metadata,
			final IPartitioner partitioner) {
		final Collection<SSTableReader> sstables=new LinkedBlockingQueue<SSTableReader>();
		
		ExecutorService executor=DebuggableThreadPoolExecutor.createWithPoolSize("SSTableBatchOpen", Runtime.getRuntime().availableProcessors());
		for(final Map.Entry<Descriptor, Set<Component>> entry:entries){
			Runnable runnable=new Runnable(){
				public void run(){
					SSTableReader sstable;
					try{
						sstable=open(entry.getKey(),entry.getValue(),savedKeys,tracker,metadata,partitioner);
					}catch(IOException ex){
						logger.error("Corrupt sstable " + entry + "; skipped", ex);
						return;
					}
					sstables.add(sstable);
				}
			};
			executor.submit(runnable);
		}
		executor.shutdown();
		try{
			executor.awaitTermination(7, TimeUnit.DAYS);
		}catch(InterruptedException e){
			throw new AssertionError(e);
		}
		return sstables;
	}

	protected static SSTableReader open(Descriptor descriptor, Set<Component> components,
			Set<DecoratedKey> savedKeys, DataTracker tracker,
			CFMetaData metadata, IPartitioner partitioner) throws IOException {
		assert partitioner!=null;
		assert components.contains(Component.DATA);
		assert components.contains(Component.PRIMARY_INDEX);
		
		long start=System.currentTimeMillis();
		logger.info("Opening {} ({} bytes)", descriptor, new File(descriptor.filenameFor(COMPONENT_DATA)).length());
		
		SSTableMetadata sstableMetadata=components.contains(Component.STATS)
				?SSTableMetadata.serializer.deserialize(descriptor)
				:SSTableMetadata.createDefaultInstance();
				
		String partitionerName=partitioner.getClass().getCanonicalName();
		if(partitionerName!=null&&!partitionerName.equals(sstableMetadata.partitioner)){
			throw new RuntimeException(String.format("Cannot open %s because partitioner does not match %s",
                    descriptor, partitionerName));
		}
		SSTableReader sstable=new SSTableReader(descriptor,
												components,
												metadata,
												partitioner,
												null,
												null,
												null,
												System.currentTimeMillis(),
												sstableMetadata);
		
		sstable.setTrackedBy(tracker);
	}

}
